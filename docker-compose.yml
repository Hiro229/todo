# Docker Compose for Production Environment
services:
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - todo-network
    restart: always

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    environment:
      ENVIRONMENT: production
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      DEBUG: false
      HOST: 0.0.0.0
      PORT: ${PORT:-8000}
      CORS_ORIGINS: ${CORS_ORIGINS}
    ports:
      - "${PORT:-8000}:${PORT:-8000}"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - todo-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx reverse proxy (optional for self-hosted)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl:ro
    depends_on:
      - backend
    networks:
      - todo-network
    restart: always

volumes:
  postgres_data:

networks:
  todo-network:
    driver: bridge